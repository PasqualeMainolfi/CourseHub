float b = 0.19;
float dt = 0.05;  // Passo di tempo 

PVector thomas1 = new PVector(0.1, 0, 0);
PVector thomas2 = new PVector(0.15, 0.5, 0.1);

void setup() {
    size(1300, 1000, P3D);  // Imposta la dimensione della finestra e utilizza il rendering 3D
    background(0);          // Imposta lo sfondo nero

}

int i;  // indice per il disegno dei punti
float px1, py1, pz1;  // Variabili utili ad osservare e memorizzare la posizione precedente degli attrattori
float px2, py2, pz2;   

void draw() {
    translate(width / 2, height / 2, 0);  // Trasla l'origine al centro della finestra
    scale(80);  // Scala la scena

    beginShape();
    vertex(thomas1.x, thomas1.y, thomas1.z);

    PVector thomas_dot1 = new PVector();
    thomas_dot.x = -b * thomas1.x + sin(thomas1.y);
    thomas_dot.y = -b * thomas1.y + sin(thomas1.z);
    thomas_dot.z = -b * thomas1.z + sin(thomas1.x);

    // Calcola le derivate per il secondo attrattore
    PVector thomas_dot2 = new PVector();
    thomas2_dot.x = -b * thomas2.x + sin(thomas2.y);
    thomas2_dot.y = -b * thomas2.y + sin(thomas2.z);
    thomas2_dot.z = -b * thomas2.z + sin(thomas2.x);

    // Aggiorna i valori del primo attrattore
    thomas1.add(thomas1_dot.mult(dt));

    // Aggiorna i valori del secondo attrattore
    thomas2.add(thomas2_dot.mult(dt));
    endShape();
}
